package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.ActorService;
import services.BoxService;
import domain.Actor;
import domain.Box;
import domain.Message;

@Controller
@RequestMapping("/box")
public class BoxController extends AbstractController {

	
	// Services
	
	@Autowired
	private BoxService boxService;
	
	@Autowired
	private ActorService actorService;
	
	// Constructor

	public BoxController() {
		super();
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam int boxId) {
		ModelAndView result;
		Box parentBox = boxService.findOne(boxId);
		Box box;
		box = boxService.create();
		box.setParentBox(parentBox);
		result = this.createEditModelAndView(box, false);
		return result;
	}
	
	@RequestMapping(value = "/move", method = RequestMethod.GET)
	public ModelAndView createMove(@RequestParam int boxId) {
		ModelAndView result;
		Box box;
		
		box = boxService.findOne(boxId);
		
		Actor principal = actorService.findByPrincipal();
		Collection<Box> boxes = principal.getBoxes();
		result = new ModelAndView("box/move");
		result.addObject("box", box);
		result.addObject("message", null);
		result.addObject("boxes", boxes);
		
		return result;

	}

	@RequestMapping(value = "/createFirst", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		Box box;
		box = boxService.create();
		result = this.createEditModelAndView(box, true);
		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid Box box, BindingResult binding) {

		ModelAndView result;
		if (binding.hasErrors()) {
			result = this.createEditModelAndView(box, false);

		} else {

			try {

				boxService.save(box);

				result = new ModelAndView("redirect:display.do?boxIdId="
						+ box.getParentBox().getId());

			} catch (Throwable oops) {

				result = createEditModelAndView(box, "ms.commit.error",
						false);

			}

		}
		return result;

	}
	
	@RequestMapping(value = "/saveMove", method = RequestMethod.GET)
	public ModelAndView saveMove(@RequestParam(required=true) int targetboxId,
		@RequestParam(required=true) int boxId){
		ModelAndView result;
		Box box = boxService.findOne(boxId);
		Assert.notNull(box);
		Box targetBox = boxService.findOne(targetboxId);
		Assert.notNull(targetBox);
		
		try {
			
	//		boxService.saveToMove(box,targetBox);
			result = new ModelAndView("redirect:/box/display.do?boxId="+targetBox.getId());

		} catch (Throwable oops) {
			Actor principal = actorService.findByPrincipal();
			Collection<Box> boxes = principal.getBoxes();
			result = new ModelAndView("message/move");
			result.addObject("box", box);
			result.addObject("message", "ms.commit.error");
			result.addObject("boxes", boxes);

			

		}
		
		return result;
	}
	
	

	@RequestMapping(value = "/editFirst", method = RequestMethod.POST, params = "saveFirst")
	public ModelAndView saveFirst(@Valid Box box, BindingResult binding) {

		ModelAndView result;
		if (binding.hasErrors()) {
			result = this.createEditModelAndView(box, true);

		} else {
			try {

				boxService.save(box);

				result = new ModelAndView("redirect:list.do");

			} catch (Throwable oops) {

				result = createEditModelAndView(box, "ms.commit.error", true);

			}

		}
		return result;

	}

	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public ModelAndView delete(@RequestParam int boxId) {
		ModelAndView result;
		Box box;
		box = boxService.findOne(boxId);
		Box parentBox = box.getParentBox();

		if (box.getParentBox()==null) {
			
			try {
				this.boxService.delete(box);
				result = new ModelAndView("redirect:list.do");
//				result = new ModelAndView(
//						"redirect:/box/display.do?boxId="
//								+ parentBox.getId());
			} catch (final Throwable oops) {
				result = new ModelAndView(
						"redirect:/box/display.do?boxId="
								+ box.getId());

			}
			
		} else {

			try {
				this.boxService.delete(box);

				result = new ModelAndView(
						"redirect:/box/display.do?boxId="
								+ parentBox.getId());
			} catch (final Throwable oops) {
				result = new ModelAndView(
						"redirect:/box/display.do?boxId="
								+ box.getId());

			}
		}

		return result;

	}


	@RequestMapping(value = "/editFirst", method = RequestMethod.POST, params = "delete")
	public ModelAndView deleteFirst(Box box, BindingResult binding) {
		ModelAndView result;

		try {
			this.boxService.delete(box);
			result = new ModelAndView("redirect:list.do");
		} catch (final Throwable oops) {
			result = this.createEditModelAndView(box,
					"application.commit.error", true);
		}

		return result;

	}

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list() {

		ModelAndView result;
		Collection<Box> boxes;

		Actor actor = actorService.findByPrincipal();
		boxes = boxService.getFirstLevelBoxesFromActorId(actor.getId());

		result = new ModelAndView("box/list");
		result.addObject("boxes", boxes);

		return result;

	}

	@RequestMapping(value = "/display", method = RequestMethod.GET)
	public ModelAndView display(@RequestParam int boxId) {

		ModelAndView result;
		Box box;
		Collection<Message> messages;
		Collection<Box> boxes;
		box = boxService.findOne(boxId);
		messages = box.getMessages();
		boxes =boxrService.getChildBoxes(boxId);
		result = new ModelAndView("box/display");
		result.addObject("boxes", boxes);
		result.addObject("messages", messages);
		result.addObject("box", box);

		return result;

	}

	protected ModelAndView createEditModelAndView(final Box box,
			boolean isFirst) {
		ModelAndView result;

		result = this.createEditModelAndView(box, null, isFirst);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Box box,
			final String messageCode, boolean isFirst) {

		ModelAndView result;
		if (isFirst) {
			result = new ModelAndView("box/createFirst");
			result.addObject("box", box);
			result.addObject("message", messageCode);
		} else {
			result = new ModelAndView("box/create");
			Box parentBox = box.getParentBox();
			result.addObject("box", box);
			result.addObject("message", messageCode);
			result.addObject("parentBox", parentBox);
		}

		return result;
	}
}
